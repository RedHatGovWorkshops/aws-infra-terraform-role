#----------------------------------------------
# Variables
#----------------------------------------------
variable "aws_access_key" {}
variable "aws_secret_key" {}
variable "security_group" { default = "{{ workshop_prefix }}-sg" }
variable "keypair" { default = "{{ workshop_prefix }}-private-key" }
variable "master_instance_type" { default = "{{ master_instance_type }}" } 
variable "node_instance_type" { default = "{{ node_instance_type }}" } 
variable "aws_region" { default = "{{ region }}" }
variable "ebs_root_block_size" { default = "50" }
variable "aws_node_ami" { default = "{{ ami_id }}" }
variable "number_master_nodes" { default = "{{ number_master_nodes }}" }
variable "number_nodes" { default = "{{ number_nodes }}" }


#----------------------------------------------
# API Keys
#----------------------------------------------
provider "aws" {
    access_key = "${var.aws_access_key}"
    secret_key = "${var.aws_secret_key}"
    region     = "${var.aws_region}"
}


#----------------------------------------------
# VPC
#----------------------------------------------
# Main VPC that will contain everything.
resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true
 
  tags { 
    Name = "{{ workshop_prefix }}-vpc" 
  }
}

# The public subnet is where resources connected to the internet will go
resource "aws_subnet" "public" {
    vpc_id                  = "${aws_vpc.main.id}"
    cidr_block              = "10.0.2.0/24"
    map_public_ip_on_launch = true
    tags { Name = "{{ workshop_prefix }}-public-subnet" }
}

# Internet accessible route table + gateway for the public subnet
resource "aws_internet_gateway" "public" {
  vpc_id = "${aws_vpc.main.id}"
  tags { Name = "{{ workshop_prefix }}-igw" }
}

resource "aws_route_table" "public" {
  vpc_id = "${aws_vpc.main.id}"
  route {
      cidr_block = "0.0.0.0/0"
      gateway_id = "${aws_internet_gateway.public.id}"
  }
  tags { Name = "{{ workshop_prefix }}-public-rt" }
}

resource "aws_route_table_association" "public" {
  subnet_id      = "${aws_subnet.public.id}"
  route_table_id = "${aws_route_table.public.id}"
}


#----------------------------------------------
# Security Group
#----------------------------------------------
resource "aws_security_group" "{{ workshop_prefix }}-sg" {
  name   = "{{ workshop_prefix }}-sg"
  vpc_id = "${aws_vpc.main.id}"

  egress {
    protocol    = -1
    from_port   = 0
    to_port     = 0
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 443
    to_port     = 443
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 80
    to_port     = 80
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 8443
    to_port     = 8443
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 22
    to_port     = 22
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 5000
    to_port     = 5000
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 8888
    to_port     = 8888
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    protocol    = "tcp"
    from_port   = 9090
    to_port     = 9090
    cidr_blocks = ["0.0.0.0/0"]
  }
}


#----------------------------------------------
# DNS
#----------------------------------------------
resource "aws_route53_record" "master-node" {
  # same number of records as instances
  count    = "${var.number_master_nodes}"
  zone_id  = "{{ zone_id }}"                       
  name     = "{{ workshop_prefix }}.master.${count.index}.{{ domain_name }}"
  type     = "A"
  ttl      = "300"
  # matches up record N to instance N
  records  = ["${element(aws_instance.master-node.*.public_ip, count.index)}"]
}

resource "aws_route53_record" "nodes" {
  # same number of records as instances
  count    = "${var.number_nodes}"
  zone_id  = "{{ zone_id }}"                       
  name     = "{{ workshop_prefix }}.node.${count.index}.{{ domain_name }}"
  type     = "A"
  ttl      = "300"
  # matches up record N to instance N
  records  = ["${element(aws_instance.node.*.public_ip, count.index)}"]
}

# OpenShift Wildcard for Apps
resource "aws_route53_record" "wildcard" {
  count    = "${var.number_master_nodes}"
  zone_id  = "{{ zone_id }}"
  type     = "A"
  ttl      = "300"
  name     = "*.apps.ocp.{{ domain_name }}"
  records  = ["${element(aws_instance.master-node.*.public_ip, count.index)}"]
}

resource "aws_route53_record" "wetty" {
  count    = "1"
  zone_id  = "{{ zone_id }}"                       
  name     = "{{ workshop_prefix }}.wetty.{{ domain_name }}"
  type     = "A"
  ttl      = "300"
  records  = ["${aws_instance.wetty.*.public_ip}"]
}



#----------------------------------------------
# Cloud-init configuration
#----------------------------------------------
# Template for initial configuration bash script
data "template_file" "init" {
    template                = "${file("init.tpl")}"
}


#----------------------------------------------
# AMI : Master Node
#----------------------------------------------
resource "aws_instance" "master-node" {
    count             = "${var.number_master_nodes}"
    ami               = "${var.aws_node_ami}"
    instance_type     = "${var.master_instance_type}"
    # user_data         = "${data.template_file.init.rendered}"
    subnet_id         = "${aws_subnet.public.id}"
    key_name          = "${var.keypair}"
    security_groups   = [ "${aws_security_group.{{ workshop_prefix }}-sg.id}" ]

    root_block_device = {
      volume_type     = "gp2"
      volume_size     = "${var.ebs_root_block_size}"
    }
    ebs_block_device  = {
      device_name     = "{{ os_docker_block_device }}"
      volume_size     = "{{ os_docker_vol_size }}"
      volume_type     = "{{ os_docker_vol_type }}"
    }
    # provisioner "file" {
    #     source              = "{{ terraform_working_dir }}/{{ workshop_prefix }}-private-key"
    #     destination         = "{{ default_ssh }}/{{ ssh_key_name }}"
    #     connection {
    #       type              = "ssh"
    #       user              = "{{ system_user }}"
    #       private_key       = "${file("{{ terraform_working_dir }}/{{ workshop_prefix }}-private-key")}"
    #     }
    # }
    tags              = {
        Name          = "{{ workshop_prefix }}-master-${count.index}"
        Role          = "{{ workshop_prefix }}-master"
        Workshop      = "{{ workshop_prefix }}"
        Owner         = "{{ owner_email }}"
        Expire_On     = "{{ expiration_date }}"
        Index         = "${count.index}"
    }
}


#----------------------------------------------
# AMI : Generic Node
#----------------------------------------------
resource "aws_instance" "node" {
    count             = "${var.number_nodes}"
    ami               = "${var.aws_node_ami}"
    instance_type     = "${var.node_instance_type}"
    # user_data         = "${data.template_file.init.rendered}"
    subnet_id         = "${aws_subnet.public.id}"
    key_name          = "${var.keypair}"
    security_groups   = [ "${aws_security_group.{{ workshop_prefix }}-sg.id}" ]

	  root_block_device = {
      volume_type     = "gp2"
      volume_size     = "${var.ebs_root_block_size}"
	  }
    ebs_block_device  = {
      device_name     = "{{ os_docker_block_device }}"
      volume_size     = "{{ os_docker_vol_size }}"
      volume_type     = "{{ os_docker_vol_type }}"
    }
    # provisioner "file" {
    #     source              = "{{ terraform_working_dir }}/{{ workshop_prefix }}-private-key"
    #     destination         = "{{ default_ssh }}/{{ ssh_key_name }}"
    #     connection {
    #       type              = "ssh"
    #       user              = "{{ system_user }}"
    #       private_key       = "${file("{{ terraform_working_dir }}/{{ workshop_prefix }}-private-key")}"
    #     }
    # }
    tags              = {
        Name          = "{{ workshop_prefix }}-node-${count.index}"
        Role          = "{{ workshop_prefix }}-node"
        Workshop      = "{{ workshop_prefix }}"
        Owner         = "{{ owner_email }}"
        Expire_On     = "{{ expiration_date }}"
        Index         = "${count.index}"
    }
}


#----------------------------------------------
# AMI : Wetty Node
#----------------------------------------------
resource "aws_instance" "wetty" {
    count             = "1"
    ami               = "${var.aws_node_ami}"
    instance_type     = "${var.node_instance_type}"
    user_data         = "${data.template_file.init.rendered}"
    subnet_id         = "${aws_subnet.public.id}"
    key_name          = "${var.keypair}"
    security_groups   = [ "${aws_security_group.{{ workshop_prefix }}-sg.id}" ]

	  root_block_device = {
      volume_type     = "gp2"
      volume_size     = "${var.ebs_root_block_size}"
	  }
    ebs_block_device  = {
      device_name     = "{{ os_docker_block_device }}"
      volume_size     = "{{ os_docker_vol_size }}"
      volume_type     = "{{ os_docker_vol_type }}"
    }
    provisioner "file" {
        source              = "{{ terraform_working_dir }}/{{ workshop_prefix }}-private-key"
        destination         = "{{ default_ssh }}/{{ ssh_key_name }}"
        connection {
          type              = "ssh"
          user              = "{{ system_user }}"
          private_key       = "${file("{{ terraform_working_dir }}/{{ workshop_prefix }}-private-key")}"
        }
    }
    tags              = {
        Name          = "{{ workshop_prefix }}-wetty"
        Role          = "{{ workshop_prefix }}-wetty"
        Workshop      = "{{ workshop_prefix }}"
        Owner         = "{{ owner_email }}"
        Expire_On     = "{{ expiration_date }}"
        Index         = "${count.index}"
    }
}

